#include "model_{{TABLE_NAME}}.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

{{STRUCT_NAME}}Query Query{{STRUCT_NAME}}(PGconn *conn, const char *select, const char *where_clause)
{
  {{STRUCT_NAME}}Query query_result;
  char query[{{QUERY_BUFFER}}];
  snprintf(query, sizeof(query), "SELECT %s FROM {{TABLE_NAME}} WHERE %s;", select, where_clause);
  printf("SQL: %s\n", query);
  PGresult *res = PQexec(conn, query);
  ExecStatusType status = PQresultStatus(res);
  query_result.{{TABLE_NAME}} = NULL;
  query_result.status = status;
  if (status != PGRES_TUPLES_OK)
  {
    fprintf(stderr, "QUERY failed: %s\\n", PQerrorMessage(conn));
    PQclear(res);
    return query_result;
  }
  int rows = PQntuples(res);
  if (rows == 0) return query_result;
  {{STRUCT_NAME}}* list = malloc(rows * sizeof({{STRUCT_NAME}}));
  for (int i = 0; i < rows; i++)
  {
    memset(&list[i], 0, sizeof({{STRUCT_NAME}}));
    for (int j = 0; j < PQnfields(res); j++)
    {
      const char *colname = PQfname(res, j);
      const char *value = PQgetvalue(res, i, j);
{{FIELD_ASSIGNMENTS}}
    }
  }
  PQclear(res);
  query_result.{{TABLE_NAME}} = list;
  return query_result;
}

{{TABLE_NAME}}Query Insert{{STRUCT_NAME}}(PGconn *conn, {{STRUCT_NAME}} u)
{
  {{STRUCT_NAME}}Query query_result;
  char query[{{QUERY_BUFFER}}];
  snprintf(query, sizeof(query),
    "INSERT INTO {{TABLE_NAME}} {{COLUMN_NAMES}} "
    "VALUES ({{FORMAT_PARTS}});",
    {{VALUE_ARGS}});
  printf("SQL: %s\n", query);
  PGresult *res = PQexec(conn, query);
  ExecStatusType status = PQresultStatus(res);
  query_result.{{TABLE_NAME}} = NULL;
  query_result.status = status;
  if (status != PGRES_COMMAND_OK)
  {
    fprintf(stderr, "INSERT failed: %s\\n", PQerrorMessage(conn));
  }
  PQclear(res);
  return query_result;
}

{{STRUCT_NAME}}Query Update{{STRUCT_NAME}}(PGconn *conn, {{STRUCT_NAME}} u, const char *where_clause)
{
  {{STRUCT_NAME}}Query query_result;
  char query[{{QUERY_BUFFER}}];
  snprintf(query, sizeof(query),
    "UPDATE {{TABLE_NAME}} SET {{SET_CLAUSE}} WHERE %s;",
    {{UPDATE_ARGS}}, where_clause);
  printf("SQL: %s\n", query);
  PGresult *res = PQexec(conn, query);
  ExecStatusType status = PQresultStatus(res);
  query_result.{{TABLE_NAME}} = NULL;
  query_result.status = status;
  if (status != PGRES_COMMAND_OK)
  {
    fprintf(stderr, "Update failed: %s\n", PQerrorMessage(conn));
  }
  PQclear(res);
  return query_result;
}

{{STRUCT_NAME}}Query Delete{{STRUCT_NAME}}(PGconn *conn, const char *where_clause)
{
  {{STRUCT_NAME}}Query query_result;
  char query[{{QUERY_BUFFER}}];
  snprintf(query, sizeof(query),
    "DELETE FROM {{TABLE_NAME}} WHERE %s;",
    where_clause);
  printf("SQL: %s\n", query);
  PGresult *res = PQexec(conn, query);
  ExecStatusType status = PQresultStatus(res);
  query_result.{{TABLE_NAME}} = NULL;
  query_result.status = status;
  if (status != PGRES_COMMAND_OK)
  {
    fprintf(stderr, "Update failed: %s\n", PQerrorMessage(conn));
  }
  PQclear(res);
  return query_result;
}

char* Serialize{{STRUCT_NAME}}({{STRUCT_NAME}} u)
{
  char *buffer = malloc({{SERIALIZE_BUFFER}});
  if (!buffer) return NULL;
  snprintf(buffer, {{SERIALIZE_BUFFER}},
    "{{SERIALIZE_JSON_FORMAT}}",
{{SERIALIZE_JSON_ARGS}}
  );
  return buffer;
}

